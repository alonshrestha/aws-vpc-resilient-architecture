AWSTemplateFormatVersion: '2010-09-09'
Description: This project provides an AWS CloudFormation template for creating a highly resilient and scalable Virtual Private Cloud (VPC) architecture. The template includes a well-structured network layout, featuring public and private subnets, NAT gateways, and necessary routing components to facilitate secure and efficient communication between resources.
#aws-vpc-resilient-architecture
# List of available parameters. You can adjust values in parameters.json file.
Parameters:
  ProjectName:
    Type: String
  Environment:
    Type: String
  VpcCidr:
    Type: String
  PublicSubnets:
    Type: CommaDelimitedList
  PrivateNatSubnets:
    Type: CommaDelimitedList
  PrivateSubnets:
    Type: CommaDelimitedList
  AvailabilityZones:
    Type: CommaDelimitedList

Resources:
  # Create a VPC with the specified CIDR block
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "vpc-${ProjectName}-${Environment}(${VpcCidr})"

  # Public Subnets - Create three public subnets in different availability zones
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !Ref AvailabilityZones] # Select first availability zone
      CidrBlock: !Select [0, !Ref PublicSubnets] # Use the first public subnet CIDR
      MapPublicIpOnLaunch: true # Assign public IPs to instances launched in this subnet
      Tags:
        - Key: Name
          Value: !Join ['', ['subnet-public-', !Ref ProjectName, '-', !Ref Environment, '(', !Select [0, !Ref PublicSubnets], ')']]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      CidrBlock: !Select [1, !Ref PublicSubnets]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', ['subnet-public-', !Ref ProjectName, '-', !Ref Environment, '(', !Select [1, !Ref PublicSubnets], ')']]

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !Ref AvailabilityZones]
      CidrBlock: !Select [2, !Ref PublicSubnets]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', ['subnet-public-', !Ref ProjectName, '-', !Ref Environment, '(', !Select [2, !Ref PublicSubnets], ')']]

  # Private NAT Subnets - Create three private subnets with NAT gateways in different Availability Zones
  PrivateNatSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      CidrBlock: !Select [0, !Ref PrivateNatSubnets]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', ['subnet-private-nat-', !Ref ProjectName, '-', !Ref Environment, '(', !Select [0, !Ref PrivateNatSubnets], ')']]

  PrivateNatSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      CidrBlock: !Select [1, !Ref PrivateNatSubnets]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', ['subnet-private-nat-', !Ref ProjectName, '-', !Ref Environment, '(', !Select [1, !Ref PrivateNatSubnets], ')']]

  PrivateNatSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !Ref AvailabilityZones]
      CidrBlock: !Select [2, !Ref PrivateNatSubnets]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', ['subnet-private-nat-', !Ref ProjectName, '-', !Ref Environment, '(', !Select [2, !Ref PrivateNatSubnets], ')']]

  # Private Subnets - Create three private subnets in different Availability Zones
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      CidrBlock: !Select [0, !Ref PrivateSubnets]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', ['subnet-private-', !Ref ProjectName, '-', !Ref Environment, '(', !Select [0, !Ref PrivateSubnets], ')']]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      CidrBlock: !Select [1, !Ref PrivateSubnets]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', ['subnet-private-', !Ref ProjectName, '-', !Ref Environment, '(', !Select [1, !Ref PrivateSubnets], ')']]

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !Ref AvailabilityZones]
      CidrBlock: !Select [2, !Ref PrivateSubnets]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', ['subnet-private-', !Ref ProjectName, '-', !Ref Environment, '(', !Select [2, !Ref PrivateSubnets], ')']]

  # Internet Gateway - Create an Internet Gateway for the VPC
  InternetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub igw-${ProjectName}-${Environment}

  # Attach the Internet Gateway to the VPC
  AttachInternetGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGW

  # NAT Gateways - Create three NAT gateways for outbound internet access in different Availability Zones
  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP1.AllocationId  # Allocate Elastic IP for NAT Gateway
      SubnetId: !Ref PublicSubnet1  # Place NAT Gateway in  public subnet
      Tags:
        - Key: Name
          Value: !Sub natgw1-${ProjectName}-${Environment}

  NATGatewayEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc  # Specify that this EIP is for a VPC
      Tags:
        - Key: Name
          Value: !Sub eip-natgw1-${ProjectName}-${Environment}

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub natgw2-${ProjectName}-${Environment}

  NATGatewayEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub eip-natgw2-${ProjectName}-${Environment}

  NATGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP3.AllocationId
      SubnetId: !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: !Sub natgw3-${ProjectName}-${Environment}

  NATGatewayEIP3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub eip-natgw3-${ProjectName}-${Environment}

  # Route Tables - Create and configure route tables for public, nat and private subnets
  RouteTablePublicSubnet:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub rtb-public-${ProjectName}-${Environment}

  # Define the route for the public route table to allow internet access
  RouteTablePublicSubnetRoutes:
    Type: AWS::EC2::Route
    DependsOn: RouteTablePublicSubnet
    Properties:
      RouteTableId: !Ref RouteTablePublicSubnet
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGW

  # Associate public subnets with the public route table
  RouteTablePublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTablePublicSubnet

  RouteTablePublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTablePublicSubnet

  RouteTablePublicSubnet3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref RouteTablePublicSubnet

  # Define the route for private nat subnet to allow nat  access
  RouteTablePrivateNatSubnet1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub rtb-private-nat1-${ProjectName}-${Environment}

  RouteTablePrivateNatSubnet1Routes:
    Type: AWS::EC2::Route
    DependsOn: RouteTablePrivateNatSubnet1
    Properties:
      RouteTableId: !Ref RouteTablePrivateNatSubnet1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  RouteTablePrivateNatSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateNatSubnet1
      RouteTableId: !Ref RouteTablePrivateNatSubnet1

  RouteTablePrivateNatSubnet2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub rtb-private-nat2-${ProjectName}-${Environment}

  RouteTablePrivateNatSubnet2Routes:
    Type: AWS::EC2::Route
    DependsOn: RouteTablePrivateNatSubnet2
    Properties:
      RouteTableId: !Ref RouteTablePrivateNatSubnet2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  RouteTablePrivateNatSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateNatSubnet2
      RouteTableId: !Ref RouteTablePrivateNatSubnet2

  RouteTablePrivateNatSubnet3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub rtb-private-nat3-${ProjectName}-${Environment}

  RouteTablePrivateNatSubnet3Routes:
    Type: AWS::EC2::Route
    DependsOn: RouteTablePrivateNatSubnet3
    Properties:
      RouteTableId: !Ref RouteTablePrivateNatSubnet3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway3

  RouteTablePrivateNatSubnet3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateNatSubnet3
      RouteTableId: !Ref RouteTablePrivateNatSubnet3

# Define the route for private subnet with no internet access
  RouteTablePrivateSubnet:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub rtb-private-${ProjectName}-${Environment}

  RouteTablePrivateSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref RouteTablePrivateSubnet

  RouteTablePrivateSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref RouteTablePrivateSubnet

  RouteTablePrivateSubnet3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref RouteTablePrivateSubnet

  # Network ACL
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub nacl-${ProjectName}-${Environment}

  # Network ACL Subnet Associations
  NetworkAclPublicSubnet1Association:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId: !Ref PublicSubnet1
       NetworkAclId: !Ref NetworkAcl

  NetworkAclPublicSubnet2Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref NetworkAcl

  NetworkAclPublicSubnet3Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !Ref NetworkAcl

  NetworkAclPrivateNatSubnet1Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateNatSubnet1
      NetworkAclId: !Ref NetworkAcl

  NetworkAclPrivateNatSubnet2Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateNatSubnet2
      NetworkAclId: !Ref NetworkAcl

  NetworkAclPrivateNatSubnet3Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateNatSubnet3
      NetworkAclId: !Ref NetworkAcl

  NetworkAclPrivateSubnet1Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref NetworkAcl

  NetworkAclPrivateSubnet2Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref NetworkAcl

  NetworkAclPrivateSubnet3Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      NetworkAclId: !Ref NetworkAcl

  # Network ACL Inbounds Rule
  NetworkAclInboundRule32766:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 32766
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # Network ACL Outbound Rules
  NetworkAclOutboundRule100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 32766
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0